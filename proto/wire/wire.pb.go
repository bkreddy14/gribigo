// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: wire.proto

package wire

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ControlStatus int32

const (
	ControlStatus_UNKNOWN ControlStatus = 0
	ControlStatus_UP      ControlStatus = 1
	ControlStatus_DOWN    ControlStatus = 2
	ControlStatus_ERROR   ControlStatus = 3
)

// Enum value maps for ControlStatus.
var (
	ControlStatus_name = map[int32]string{
		0: "UNKNOWN",
		1: "UP",
		2: "DOWN",
		3: "ERROR",
	}
	ControlStatus_value = map[string]int32{
		"UNKNOWN": 0,
		"UP":      1,
		"DOWN":    2,
		"ERROR":   3,
	}
)

func (x ControlStatus) Enum() *ControlStatus {
	p := new(ControlStatus)
	*p = x
	return p
}

func (x ControlStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ControlStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_wire_proto_enumTypes[0].Descriptor()
}

func (ControlStatus) Type() protoreflect.EnumType {
	return &file_wire_proto_enumTypes[0]
}

func (x ControlStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ControlStatus.Descriptor instead.
func (ControlStatus) EnumDescriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{0}
}

type WireStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*WireStream_Data
	//	*WireStream_Control
	Message isWireStream_Message `protobuf_oneof:"message"`
}

func (x *WireStream) Reset() {
	*x = WireStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireStream) ProtoMessage() {}

func (x *WireStream) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireStream.ProtoReflect.Descriptor instead.
func (*WireStream) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{0}
}

func (m *WireStream) GetMessage() isWireStream_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *WireStream) GetData() *Data {
	if x, ok := x.GetMessage().(*WireStream_Data); ok {
		return x.Data
	}
	return nil
}

func (x *WireStream) GetControl() *Control {
	if x, ok := x.GetMessage().(*WireStream_Control); ok {
		return x.Control
	}
	return nil
}

type isWireStream_Message interface {
	isWireStream_Message()
}

type WireStream_Data struct {
	Data *Data `protobuf:"bytes,1,opt,name=data,proto3,oneof"`
}

type WireStream_Control struct {
	Control *Control `protobuf:"bytes,2,opt,name=control,proto3,oneof"`
}

func (*WireStream_Data) isWireStream_Message() {}

func (*WireStream_Control) isWireStream_Message() {}

type Heartbeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message   string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *Heartbeat) Reset() {
	*x = Heartbeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Heartbeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Heartbeat) ProtoMessage() {}

func (x *Heartbeat) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Heartbeat.ProtoReflect.Descriptor instead.
func (*Heartbeat) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{1}
}

func (x *Heartbeat) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Heartbeat) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type Control struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*Control_Register
	//	*Control_Status
	//	*Control_Heartbeat
	Message isControl_Message `protobuf_oneof:"message"`
}

func (x *Control) Reset() {
	*x = Control{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Control) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Control) ProtoMessage() {}

func (x *Control) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Control.ProtoReflect.Descriptor instead.
func (*Control) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{2}
}

func (m *Control) GetMessage() isControl_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *Control) GetRegister() *Register {
	if x, ok := x.GetMessage().(*Control_Register); ok {
		return x.Register
	}
	return nil
}

func (x *Control) GetStatus() ControlStatus {
	if x, ok := x.GetMessage().(*Control_Status); ok {
		return x.Status
	}
	return ControlStatus_UNKNOWN
}

func (x *Control) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetMessage().(*Control_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

type isControl_Message interface {
	isControl_Message()
}

type Control_Register struct {
	Register *Register `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type Control_Status struct {
	Status ControlStatus `protobuf:"varint,2,opt,name=status,proto3,enum=openconfig.kne.wire.ControlStatus,oneof"`
}

type Control_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,3,opt,name=heartbeat,proto3,oneof"`
}

func (*Control_Register) isControl_Message() {}

func (*Control_Status) isControl_Message() {}

func (*Control_Heartbeat) isControl_Message() {}

// Data is a single frame of data sent over the stream.
type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// raw is a raw data frame transported in the stream.
	// TODO(robjs): discuss with hines@ - this was a repeated, but that
	// doesn't seem to make sense.
	Raw []byte `protobuf:"bytes,1,opt,name=raw,proto3" json:"raw,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{3}
}

func (x *Data) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

type RegisterClientStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*RegisterClientStream_Register
	//	*RegisterClientStream_Close
	//	*RegisterClientStream_Synced
	//	*RegisterClientStream_Status
	//	*RegisterClientStream_Heartbeat
	Message isRegisterClientStream_Message `protobuf_oneof:"message"`
}

func (x *RegisterClientStream) Reset() {
	*x = RegisterClientStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterClientStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterClientStream) ProtoMessage() {}

func (x *RegisterClientStream) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterClientStream.ProtoReflect.Descriptor instead.
func (*RegisterClientStream) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{4}
}

func (m *RegisterClientStream) GetMessage() isRegisterClientStream_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *RegisterClientStream) GetRegister() *Register {
	if x, ok := x.GetMessage().(*RegisterClientStream_Register); ok {
		return x.Register
	}
	return nil
}

func (x *RegisterClientStream) GetClose() string {
	if x, ok := x.GetMessage().(*RegisterClientStream_Close); ok {
		return x.Close
	}
	return ""
}

func (x *RegisterClientStream) GetSynced() bool {
	if x, ok := x.GetMessage().(*RegisterClientStream_Synced); ok {
		return x.Synced
	}
	return false
}

func (x *RegisterClientStream) GetStatus() ControlStatus {
	if x, ok := x.GetMessage().(*RegisterClientStream_Status); ok {
		return x.Status
	}
	return ControlStatus_UNKNOWN
}

func (x *RegisterClientStream) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetMessage().(*RegisterClientStream_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

type isRegisterClientStream_Message interface {
	isRegisterClientStream_Message()
}

type RegisterClientStream_Register struct {
	Register *Register `protobuf:"bytes,1,opt,name=register,proto3,oneof"`
}

type RegisterClientStream_Close struct {
	Close string `protobuf:"bytes,2,opt,name=close,proto3,oneof"`
}

type RegisterClientStream_Synced struct {
	Synced bool `protobuf:"varint,3,opt,name=synced,proto3,oneof"`
}

type RegisterClientStream_Status struct {
	Status ControlStatus `protobuf:"varint,4,opt,name=status,proto3,enum=openconfig.kne.wire.ControlStatus,oneof"`
}

type RegisterClientStream_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,5,opt,name=heartbeat,proto3,oneof"`
}

func (*RegisterClientStream_Register) isRegisterClientStream_Message() {}

func (*RegisterClientStream_Close) isRegisterClientStream_Message() {}

func (*RegisterClientStream_Synced) isRegisterClientStream_Message() {}

func (*RegisterClientStream_Status) isRegisterClientStream_Message() {}

func (*RegisterClientStream_Heartbeat) isRegisterClientStream_Message() {}

type Register struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ANode string `protobuf:"bytes,1,opt,name=a_node,json=aNode,proto3" json:"a_node,omitempty"`
	APort string `protobuf:"bytes,2,opt,name=a_port,json=aPort,proto3" json:"a_port,omitempty"`
	ZNode string `protobuf:"bytes,3,opt,name=z_node,json=zNode,proto3" json:"z_node,omitempty"`
	ZPort string `protobuf:"bytes,4,opt,name=z_port,json=zPort,proto3" json:"z_port,omitempty"`
	Mtu   uint32 `protobuf:"varint,5,opt,name=mtu,proto3" json:"mtu,omitempty"`
}

func (x *Register) Reset() {
	*x = Register{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Register) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Register) ProtoMessage() {}

func (x *Register) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Register.ProtoReflect.Descriptor instead.
func (*Register) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{5}
}

func (x *Register) GetANode() string {
	if x != nil {
		return x.ANode
	}
	return ""
}

func (x *Register) GetAPort() string {
	if x != nil {
		return x.APort
	}
	return ""
}

func (x *Register) GetZNode() string {
	if x != nil {
		return x.ZNode
	}
	return ""
}

func (x *Register) GetZPort() string {
	if x != nil {
		return x.ZPort
	}
	return ""
}

func (x *Register) GetMtu() uint32 {
	if x != nil {
		return x.Mtu
	}
	return 0
}

type RegisterServerStream struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Message:
	//	*RegisterServerStream_Peer
	//	*RegisterServerStream_Close
	//	*RegisterServerStream_Synced
	//	*RegisterServerStream_Status
	//	*RegisterServerStream_Heartbeat
	Message isRegisterServerStream_Message `protobuf_oneof:"message"`
}

func (x *RegisterServerStream) Reset() {
	*x = RegisterServerStream{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wire_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterServerStream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterServerStream) ProtoMessage() {}

func (x *RegisterServerStream) ProtoReflect() protoreflect.Message {
	mi := &file_wire_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterServerStream.ProtoReflect.Descriptor instead.
func (*RegisterServerStream) Descriptor() ([]byte, []int) {
	return file_wire_proto_rawDescGZIP(), []int{6}
}

func (m *RegisterServerStream) GetMessage() isRegisterServerStream_Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (x *RegisterServerStream) GetPeer() *Register {
	if x, ok := x.GetMessage().(*RegisterServerStream_Peer); ok {
		return x.Peer
	}
	return nil
}

func (x *RegisterServerStream) GetClose() string {
	if x, ok := x.GetMessage().(*RegisterServerStream_Close); ok {
		return x.Close
	}
	return ""
}

func (x *RegisterServerStream) GetSynced() bool {
	if x, ok := x.GetMessage().(*RegisterServerStream_Synced); ok {
		return x.Synced
	}
	return false
}

func (x *RegisterServerStream) GetStatus() ControlStatus {
	if x, ok := x.GetMessage().(*RegisterServerStream_Status); ok {
		return x.Status
	}
	return ControlStatus_UNKNOWN
}

func (x *RegisterServerStream) GetHeartbeat() *Heartbeat {
	if x, ok := x.GetMessage().(*RegisterServerStream_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

type isRegisterServerStream_Message interface {
	isRegisterServerStream_Message()
}

type RegisterServerStream_Peer struct {
	Peer *Register `protobuf:"bytes,1,opt,name=peer,proto3,oneof"`
}

type RegisterServerStream_Close struct {
	Close string `protobuf:"bytes,2,opt,name=close,proto3,oneof"`
}

type RegisterServerStream_Synced struct {
	Synced bool `protobuf:"varint,3,opt,name=synced,proto3,oneof"`
}

type RegisterServerStream_Status struct {
	Status ControlStatus `protobuf:"varint,4,opt,name=status,proto3,enum=openconfig.kne.wire.ControlStatus,oneof"`
}

type RegisterServerStream_Heartbeat struct {
	Heartbeat *Heartbeat `protobuf:"bytes,5,opt,name=heartbeat,proto3,oneof"`
}

func (*RegisterServerStream_Peer) isRegisterServerStream_Message() {}

func (*RegisterServerStream_Close) isRegisterServerStream_Message() {}

func (*RegisterServerStream_Synced) isRegisterServerStream_Message() {}

func (*RegisterServerStream_Status) isRegisterServerStream_Message() {}

func (*RegisterServerStream_Heartbeat) isRegisterServerStream_Message() {}

var File_wire_proto protoreflect.FileDescriptor

var file_wire_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72,
	0x65, 0x22, 0x82, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x2f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65, 0x2e,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x38, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x43, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0xcf, 0x01, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x3e, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x18, 0x0a,
	0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x61, 0x77, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x03, 0x72, 0x61, 0x77, 0x22, 0x8e, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x12, 0x3b, 0x0a, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x48, 0x00, 0x52, 0x08, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63, 0x65, 0x64, 0x12,
	0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65,
	0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3e, 0x0a,
	0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e,
	0x65, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x78, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x7a, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x7a, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x7a, 0x5f, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x7a, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x74, 0x75, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6d,
	0x74, 0x75, 0x22, 0x86, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x33, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x63,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x3e, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x42, 0x09, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x39, 0x0a, 0x0d, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x50, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x32, 0x5c, 0x0a, 0x0a, 0x57, 0x69, 0x72, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65, 0x2e,
	0x77, 0x69, 0x72, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a,
	0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65,
	0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x28, 0x01, 0x30, 0x01, 0x32, 0x73, 0x0a, 0x0b, 0x57, 0x69, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x12, 0x64, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12,
	0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65,
	0x2e, 0x77, 0x69, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6b, 0x6e, 0x65, 0x2e, 0x77, 0x69, 0x72, 0x65,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x67, 0x72, 0x69, 0x62, 0x69, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x77, 0x69, 0x72, 0x65, 0x3b, 0x77, 0x69, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_wire_proto_rawDescOnce sync.Once
	file_wire_proto_rawDescData = file_wire_proto_rawDesc
)

func file_wire_proto_rawDescGZIP() []byte {
	file_wire_proto_rawDescOnce.Do(func() {
		file_wire_proto_rawDescData = protoimpl.X.CompressGZIP(file_wire_proto_rawDescData)
	})
	return file_wire_proto_rawDescData
}

var file_wire_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_wire_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_wire_proto_goTypes = []interface{}{
	(ControlStatus)(0),           // 0: openconfig.kne.wire.ControlStatus
	(*WireStream)(nil),           // 1: openconfig.kne.wire.WireStream
	(*Heartbeat)(nil),            // 2: openconfig.kne.wire.Heartbeat
	(*Control)(nil),              // 3: openconfig.kne.wire.Control
	(*Data)(nil),                 // 4: openconfig.kne.wire.Data
	(*RegisterClientStream)(nil), // 5: openconfig.kne.wire.RegisterClientStream
	(*Register)(nil),             // 6: openconfig.kne.wire.Register
	(*RegisterServerStream)(nil), // 7: openconfig.kne.wire.RegisterServerStream
}
var file_wire_proto_depIdxs = []int32{
	4,  // 0: openconfig.kne.wire.WireStream.data:type_name -> openconfig.kne.wire.Data
	3,  // 1: openconfig.kne.wire.WireStream.control:type_name -> openconfig.kne.wire.Control
	6,  // 2: openconfig.kne.wire.Control.register:type_name -> openconfig.kne.wire.Register
	0,  // 3: openconfig.kne.wire.Control.status:type_name -> openconfig.kne.wire.ControlStatus
	2,  // 4: openconfig.kne.wire.Control.heartbeat:type_name -> openconfig.kne.wire.Heartbeat
	6,  // 5: openconfig.kne.wire.RegisterClientStream.register:type_name -> openconfig.kne.wire.Register
	0,  // 6: openconfig.kne.wire.RegisterClientStream.status:type_name -> openconfig.kne.wire.ControlStatus
	2,  // 7: openconfig.kne.wire.RegisterClientStream.heartbeat:type_name -> openconfig.kne.wire.Heartbeat
	6,  // 8: openconfig.kne.wire.RegisterServerStream.peer:type_name -> openconfig.kne.wire.Register
	0,  // 9: openconfig.kne.wire.RegisterServerStream.status:type_name -> openconfig.kne.wire.ControlStatus
	2,  // 10: openconfig.kne.wire.RegisterServerStream.heartbeat:type_name -> openconfig.kne.wire.Heartbeat
	1,  // 11: openconfig.kne.wire.WireServer.Stream:input_type -> openconfig.kne.wire.WireStream
	5,  // 12: openconfig.kne.wire.WireControl.Register:input_type -> openconfig.kne.wire.RegisterClientStream
	1,  // 13: openconfig.kne.wire.WireServer.Stream:output_type -> openconfig.kne.wire.WireStream
	7,  // 14: openconfig.kne.wire.WireControl.Register:output_type -> openconfig.kne.wire.RegisterServerStream
	13, // [13:15] is the sub-list for method output_type
	11, // [11:13] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_wire_proto_init() }
func file_wire_proto_init() {
	if File_wire_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wire_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Heartbeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Control); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterClientStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Register); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wire_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterServerStream); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wire_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*WireStream_Data)(nil),
		(*WireStream_Control)(nil),
	}
	file_wire_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Control_Register)(nil),
		(*Control_Status)(nil),
		(*Control_Heartbeat)(nil),
	}
	file_wire_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RegisterClientStream_Register)(nil),
		(*RegisterClientStream_Close)(nil),
		(*RegisterClientStream_Synced)(nil),
		(*RegisterClientStream_Status)(nil),
		(*RegisterClientStream_Heartbeat)(nil),
	}
	file_wire_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*RegisterServerStream_Peer)(nil),
		(*RegisterServerStream_Close)(nil),
		(*RegisterServerStream_Synced)(nil),
		(*RegisterServerStream_Status)(nil),
		(*RegisterServerStream_Heartbeat)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wire_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_wire_proto_goTypes,
		DependencyIndexes: file_wire_proto_depIdxs,
		EnumInfos:         file_wire_proto_enumTypes,
		MessageInfos:      file_wire_proto_msgTypes,
	}.Build()
	File_wire_proto = out.File
	file_wire_proto_rawDesc = nil
	file_wire_proto_goTypes = nil
	file_wire_proto_depIdxs = nil
}
